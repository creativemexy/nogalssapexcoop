generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  phoneNumber   String?
  dateOfBirth   DateTime?
  address       String?
  profileImage  String?
  role          UserRole       @default(MEMBER)
  isActive      Boolean        @default(true)
  isVerified    Boolean        @default(false)
  twoFactorEnabled Boolean     @default(false)
  twoFactorSecret  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  cooperativeId String?
  businessId    String?
  title         String?
  apex          Apex?
  contributions Contribution[]
  leader        Leader?
  loans         Loan[]
  payments      Payment[]
  transactions  Transaction[]
  business      Business?      @relation(fields: [businessId], references: [id])
  cooperative   Cooperative?   @relation(fields: [cooperativeId], references: [id])
  sessions      UserSession[]
  events        Event[]
  virtualAccount VirtualAccount?

  @@map("users")
}

model Cooperative {
  id                 String         @id @default(cuid())
  name               String
  registrationNumber String         @unique
  address            String
  phoneNumber        String
  email              String
  description        String?
  logo               String?
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  bankAccountNumber  String
  bankAccountName    String
  bankName           String
  city               String
  approved           Boolean?       @default(false)
  approvedAt         DateTime?
  approvedBy         String?
  bankId             String?
  lgaId              String?
  stateId            String?
  type               String?
  contributions      Contribution[]
  bank               Bank?          @relation(fields: [bankId], references: [id])
  lga                Lga?           @relation(fields: [lgaId], references: [id])
  state              State?         @relation(fields: [stateId], references: [id])
  leader             Leader?
  loans              Loan[]
  payments           Payment[]
  transactions       Transaction[]
  members            User[]

  @@map("cooperatives")
}

model Leader {
  id                String      @id @default(cuid())
  userId            String      @unique
  cooperativeId     String      @unique
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  approved          Boolean?    @default(false)
  approvedAt        DateTime?
  endDate           DateTime?
  role              String?
  startDate         DateTime?
  title             String?
  bankAccountName   String?
  bankAccountNumber String?
  bankName          String?
  cooperative       Cooperative @relation(fields: [cooperativeId], references: [id], onDelete: Cascade)
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leaders")
}

model Apex {
  id        String   @id @default(cuid())
  userId    String   @unique
  region    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("apex")
}

model Business {
  id                 String        @id @default(cuid())
  name               String
  registrationNumber String        @unique
  businessType       String
  address            String
  phoneNumber        String
  email              String
  description        String?
  logo               String?
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  payments           Payment[]
  transactions       Transaction[]
  users              User[]

  @@map("businesses")
}

model Contribution {
  id            String      @id @default(cuid())
  userId        String
  cooperativeId String
  amount        Decimal
  description   String?
  date          DateTime    @default(now())
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cooperative   Cooperative @relation(fields: [cooperativeId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contributions")
}

model Loan {
  id            String      @id @default(cuid())
  userId        String
  cooperativeId String
  amount        Decimal
  purpose       String
  interestRate  Decimal
  duration      Int
  status        String      @default("PENDING")
  approvedBy    String?
  approvedAt    DateTime?
  startDate     DateTime?
  endDate       DateTime?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cooperative   Cooperative @relation(fields: [cooperativeId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model Transaction {
  id            String          @id @default(cuid())
  userId        String
  cooperativeId String?
  businessId    String?
  type          TransactionType
  amount        Decimal
  description   String?
  reference     String          @unique
  status        PaymentStatus   @default(PENDING)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  payment       Payment?
  business      Business?       @relation(fields: [businessId], references: [id])
  cooperative   Cooperative?    @relation(fields: [cooperativeId], references: [id])
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Payment {
  id                 String        @id @default(cuid())
  transactionId      String        @unique
  userId             String
  cooperativeId      String?
  businessId         String?
  amount             Decimal
  currency           String        @default("NGN")
  paymentMethod      String        @default("PAYSTACK")
  paystackReference  String?       @unique
  paystackAccessCode String?
  status             PaymentStatus @default(PENDING)
  metadata           Json?
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  business           Business?     @relation(fields: [businessId], references: [id])
  cooperative        Cooperative?  @relation(fields: [cooperativeId], references: [id])
  transaction        Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Log {
  id        String   @id @default(cuid())
  userId    String
  userEmail String
  action    String
  timestamp DateTime @default(now())

  @@map("logs")
}

model Bank {
  id           String        @id @default(cuid())
  name         String        @unique
  cooperatives Cooperative[]

  @@map("banks")
}

model State {
  id           String        @id @default(cuid())
  name         String        @unique
  cooperatives Cooperative[]
  lgas         Lga[]

  @@map("states")
}

model Lga {
  id           String        @id @default(cuid())
  name         String
  stateId      String
  cooperatives Cooperative[]
  state        State         @relation(fields: [stateId], references: [id], onDelete: Cascade)

  @@map("lgas")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

model Partner {
  id          String   @id @default(cuid())
  name        String
  logo        String   // URL to logo image
  website     String?  // Optional partner website
  description String?  // Optional description
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model EmergencyAlert {
  id        String   @id @default(cuid())
  title     String
  message   String
  severity  String   // e.g., 'CRITICAL', 'WARNING'
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  createdBy String   // userId of the super admin
}

model SystemSettings {
  id                String   @id @default(cuid())
  category          String   // 'general', 'branding', 'payment', 'notification', 'security', 'privacy'
  key               String   // Setting key
  value             String   // Setting value (JSON string for complex data)
  description       String?  // Human-readable description
  isActive          Boolean  @default(true)
  updatedAt         DateTime @updatedAt
  updatedBy         String   // userId of the admin who updated
  
  @@unique([category, key])
  @@map("system_settings")
}

model NotificationLog {
  id            String            @id @default(cuid())
  type          NotificationType  // 'EMAIL' or 'SMS'
  recipient     String            // email address or phone number
  subject       String?           // email subject (null for SMS)
  message       String            // message content
  status        NotificationStatus @default(PENDING) // 'PENDING', 'SENT', 'FAILED'
  provider      String?           // 'resend', 'sms_provider', etc.
  providerId    String?           // external provider message ID
  cost          Float?            // cost in Naira (for SMS)
  errorMessage  String?           // error details if failed
  metadata      Json?             // additional data (user info, etc.)
  sentAt        DateTime?         // when notification was sent
  createdAt     DateTime          @default(now())
  
  @@map("notification_logs")
}

enum NotificationType {
  EMAIL
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum UserRole {
  SUPER_ADMIN
  APEX
  LEADER
  COOPERATIVE
  MEMBER
  BUSINESS
  FINANCE
  APEX_FUNDS
  NOGALSS_FUNDS
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  CANCELLED
}

enum TransactionType {
  CONTRIBUTION
  LOAN
  WITHDRAWAL
  FEE
  INVESTMENT
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  date        DateTime
  time        String?
  location    String?
  image       String?
  category    String?
  attendees   Int?        @default(0)
  isPublished Boolean     @default(false)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String
  creator     User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("events")
}

model VirtualAccount {
  id            String   @id @default(cuid())
  userId        String   @unique
  accountType   String   // 'MEMBER', 'LEADER', 'COOPERATIVE'
  accountName   String
  accountNumber String
  bankName      String
  bankCode      String
  customerCode  String   @unique
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("virtual_accounts")
}

model PendingRegistration {
  id        String   @id @default(cuid())
  type      String   // 'COOPERATIVE', 'MEMBER'
  data      String   // JSON string of registration data
  reference String   @unique
  status    String   @default("PENDING") // 'PENDING', 'COMPLETED', 'FAILED'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pending_registrations")
}
